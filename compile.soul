var TokenKind = Enum(
    "TokenKind",
    "
    IF
    THEN
    ELSE
    IDENT
    INT
    OPERATOR
    PRINT
    STRING
    VAR
    ASSIGN
    UNKNOWN
    EOF
    ENDLN
    METHOD
    BLOCKEND
    EQ
    INPUT
    DIV
    MUL
    MINUS
    PLUS
    LPAREN
    RPAREN
    FUNC
    RUN
    COMMA
    NEQ
    GREAT
    LESS
    RETURN
    ALGEBRA
    ALC
    COMMENT
    COLON
    IN
    WHILE
    RET
    BREAK
    LAMBDA
    GE
    LE
    ASSERT
    OR
    AND
    TRY
    EXCEPT
    RAISE
    TRUE
    FALSE
    NONE
    LBRACK
    RBRACK
    DOT
    INIT
    NEWLINE
    "
);

func Token(row, column, kind, data) {
    init: dict();
    update(self, "kind", kind);
    update(self, "data", data);
    return self
};

func Lexer(src) {
    var src = array(src);
    var idx = 0;
    var kws = dd(TokenKind."IDENT");
    update(kws, "if", TokenKind."IF");
    update(kws, "{", TokenKind."THEN");
    update(kws, "}", TokenKind."BLOCKEND");
    update(kws, "(", TokenKind."LPAREN");
    update(kws, ")", TokenKind."RPAREN");
    update(kws, "else", TokenKind."ELSE");
    update(kws, "+", TokenKind."PLUS");
    update(kws, "-", TokenKind."MINUS");
    update(kws, "*", TokenKind."MUL");
    update(kws, "/", TokenKind."DIV");
    update(kws, "print", TokenKind."PRINT");
    update(kws, "var", TokenKind."VAR");
    update(kws, "=", TokenKind."ASSIGN");
    update(kws, ";", TokenKind."ENDLN");
    update(kws, ",", TokenKind."COMMA");
    update(kws, "==", TokenKind."EQ");
    update(kws, "is", TokenKind."EQ");
    update(kws, "!=", TokenKind."NEQ");
    update(kws, "not", TokenKind."NEQ");
    update(kws, ">", TokenKind."GREAT");
    update(kws, "<", TokenKind."LESS");
    update(kws, "input", TokenKind."INPUT");
    update(kws, "func", TokenKind."FUNC");
    update(kws, "return", TokenKind."RETURN");
    update(kws, "sio", TokenKind."RUN");
    update(kws, "import", TokenKind."RUN");
    update(kws, "alg", TokenKind."ALGEBRA");
    update(kws, "@", TokenKind."ALC");
    update(kws, ":", TokenKind."COLON");
    update(kws, "in", TokenKind."IN");
    update(kws, "while", TokenKind."WHILE");
    update(kws, "ret", TokenKind."RET");
    update(kws, "break", TokenKind."BREAK");
    update(kws, "lambda", TokenKind."LAMBDA");
    update(kws, "ge", TokenKind."GE");
    update(kws, "le", TokenKind."LE");
    update(kws, "or", TokenKind."OR");
    update(kws, "and", TokenKind."AND");
    update(kws, "assert", TokenKind."ASSERT");
    update(kws, "try", TokenKind."TRY");
    update(kws, "except", TokenKind."EXCEPT");
    update(kws, "raise", TokenKind."RAISE");
    update(kws, "None", TokenKind."NONE");
    update(kws, "True", TokenKind."TRUE");
    update(kws, "False", TokenKind."FALSE");
    update(kws, "[", TokenKind."LBRACK");
    update(kws, ")", TokenKind."RBRACK");
    update(kws, ".", TokenKind."DOT");
    update(kws, "init", TokenKind."INIT");
    update(kws, "nl", TokenKind."NEWLINE");

    var row = 1;
    var column = 1;
    var NORMAL = None;
    var STRING = "STRING";
    var DIGIT = "DIGIT";
    var IDENTIFIER = "IDENTIFIER";
    var state = NORMAL;
    var accumulator = array();
    var TokenList = array();

    func callback(token) {
        append(TokenList, token);
        eat();
        return TokenList
    };

    func accept() {
        var ch = src.idx;
        consume_whitespace();
        if state is NORMAL {
            if ch is '"' {
                var state = STRING
            };
            if state not DIGIT {
                if is_digit(ch) {
                    var state = DIGIT
                }
            };
            if is_alpha(ch) {
                var state = IDENTIFIER
            }
        };
        if state is STRING {
            print ch;
            if ch is '"' {
                var state = NORMAL;
                callback(Token(row, column, TokenKind."STRING", accumulator));
                clear(accumulator)
            }
        };
        if state is DIGIT {
            if is_digit(ch) is False {
                var state = NORMAL;
                var accumulator = int(accumulator);
                callback(Token(row, column, TokenKind."INT", accumulator));
                clear(accumulator)
            }
        };
        if state is DIGIT  {
            if is_digit(ch) {
                print "is digit case 2";
                append(accumulator, ch)
            }
        };
        if state is IDENTIFIER {
            if is_alpha(ch) or '_' or is_digit(ch) {
                append(accumulator, ch)
            }
            else {
                var state = NORMAL;
                callback(Token(row, column, TokenKind."IDENT", accumulator));
                clear(accumulator)
            }
        }
        else append(accumulator, ch)
    };

    func eat() {
        if src.idx is nl {
            var row = row + 1;
            var column = 1
        }
        else {
            var column = column + 1
        };
        var idx = idx + 1
    };

    func consume_whitespace() {
        while idx < len(src) {
            if is_space(src.idx) {
                eat()
            }
        }
    };
    init: dict();
    update(self, "accept", accept);
    self
}
